cmdhistory=["(defn deck-of-cards {\:d1 1 \:c1 1  })" "(defn deck-of-cards [{\:d1 1 \:c1 1  }])" "({})" "({\:g 1})" "(\#{\:g 1})" "(\#{2 1})" "({2 1})" "(2 1)" "(max(2 1))" "(clojure.core/ns blackjack.core)\\n(defn foo\\n  \\"I don't do a whole lot.\\"\\n  [x]\\n  (println x \\"Hello, World\!\\"))\\n\\n(clojure.core/ns blackjack.domain)" "(max(2 1))" "(max[2 1])" "(apply max[2 1])" "([{\:2 1 }])" "([{\:2 \\"1\\" }])" "([\:2 \\"1\\"])" "[\:2 \\"1\\"]" "{\:2 \\"1\\"}" "(defn deck-of-cards {\:2 \\"1\\"})" "(def deck-of-cards {\:2 \\"1\\"})" "deck-of-cards" "(def deck-of-cards {\:2 1})" "deck-of-cards" "(def ones [{\:a 1} {\:d 1} {\:c 1} {\:h 1}  ])" "ones" "(apply map  (range 0 2)  [\:a \:b])" "(apply zipmap  (range 0 2)  [\:a \:b])" "(apply zipmap   [\:a \:b]   (range 0 2))" "(zipmap   [\:a \:b]   (range 0 2))" "(zipmap   [\:a \:b]   (range 0 4))" "(zipmap   [\:a \:c \:h \:s ]   (range 0 4))" "(4 times 1)" "(reapeat 5)" "(reapeat (5))" "\\r\\n(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )" "(reapeat 4)" "(reapeat (4))" "(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )" "(reapeat 4)" "(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )\\n\\n" "(repeatfive 9)" "(reapeat 4 1)" "(repeat 4 1)" "(zipmap   [\:a \:c \:h \:s ]   (repeat 4 1))" " (iterate inc 5)" " (take 5 (iterate inc 5))" " (def powers-of-two (iterate (partial * 2) 1))" "(zipmap   [\:a \:c \:h \:s ]   (repeat 4 1))" "(1 2 3 4)" "(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )" "(1 2 3 4)" "[1 2 3 4]" " \\n (def powers-of-two (iterate (partial * 2) 1))" "(take 5 (iterate inc 5))" "(take 2 (iterate inc 5))" "(zipmap   [\:a \:c \:h \:s ]   (repeat 2 (take 2 (iterate inc 5))))" "(repeat 2 (take 2 (iterate inc 5)))" "(conj(repeat 2 (take 2 (iterate inc 5))))" "(conj repeat 2 (take 2 (iterate inc 5)))" " (apply ( repeat 2 (take 2 (iterate inc 5))))" "   (repeat 2 (take 2 (iterate inc 5)))" "(repeat 3 (take 2 (iterate inc 5)))" "  (repeat 3 (take 4 (iterate inc 1))))" "(repeat 3 (take 4 (iterate inc 1)))" "(repeat 3 (zipmap [\:a \:c \:h \:s](take 4 (iterate inc 1))))" " (repeat 14 (zipmap [\:a \:c \:h \:s](take 4 (iterate inc 1))))" " (repeat 14 (zipmap [\:a \:c \:h \:s](take 14 (iterate inc 1))))" "   (repeat 3 (zipmap [\:a \:c \:h \:s](take 4 (iterate inc 1))))" " (repeat 3 (conj a c h s)(take 4 (iterate inc 1)))" "(repeat 3 (take 4 (iterate inc 1)))" "[a b c d] " "(a b c d)" "(a b c d) " "[a b c d] " "[\\"a\\" \\"b\\" \\"c\\" \\"f\\"]" "(assoc [\\"a\\" \\"b\\" \\"c\\" \\"f\\"] [1 2 3 4]) " "(assoc (\\"a\\" \\"b\\" \\"c\\" \\"f\\") (1 2 3 4))  " "(conj [\\"a\\" \\"b\\" \\"c\\" \\"f\\"] [1 2 3 4])  " "(apply conj [\\"a\\" \\"b\\" \\"c\\" \\"f\\"] [1 2 3 4])  " "(zipmap [\\"a\\" \\"a\\" \\"a\\" \\"a\\"] [1 2 3 4])  " "(vec(zipmap [\\"a\\" \\"a\\" \\"a\\" \\"a\\"] [1 2 3 4]))  " "(vec(zipmap [\:a \:a \:a \:a] [1 2 3 4])) " "(vec(apply reduce [\:a \:a \:a \:a] [1 2 3 4]))  " "(vec(apply \:a [1 2 3 4])) " "(vec(apply [\:a] [1 2 3 4]))  " "\\n(vec(apply [\:a] [1])) " "(apply [\:a] [1])" "(assoc [\:a] [1])" "(assoc [2] [1])" "(apply [2] [1])" "(zipmap [2] [1])" "(vec(zipmap [2] [1]))" "\\n(vec(zipmap [a] [1]))" "(vec(zipmap [\\"a\\"] [1]))" "(vec(zipmap [\\"a\\" \\"\:c\\" \\"\:h\\" \\"\:s\\"] [1 1 1 1]))" "(vec(zipmap [\\"a\\" \\"c\\" \\"h\\" \\"s\\"] [1 1 1 1]))" "(repeat 3 (take 4 (iterate inc 1)))" "(repeat 1 (take 4 (iterate inc 1))))" " (repeat 1 (take 4 (iterate inc 1)))" "(repeat 1 (take 4 (iterate inc 2)))" "(repeat 1 (take 14 (iterate inc 1)))" "   (apply \\"a\\" (repeat 1 (take 14 (iterate inc 1))))" "(vec(zipmap [\\"a\\"] [1 2 3 4]))" "\\n(vec(apply zipmap [\\"a\\"] [1 2 3 4]))" "(vec(apply map [\\"a\\"] [1 2 3 4]))" "(vec(apply (zipmap [\\"a\\"] )[1 2 3 4]))" "(apply \\"a\\" (repeat 1 (take 14 (iterate inc 1))))\\n" "  (repeat 1 (take 14 (iterate inc 1)))" "(vec(apply (zipmap [\\"a\\" \\"b\\"] )[1 2 ]))" "(zipmap [\\"a\\" \\"b\\"] [1 2 ])" "(into [\\"a\\" \\"a\\"] [1 2 ])" "(conj [\\"a\\" \\"a\\"] [1 2 ])" "(zipmap [\\"a\\" \\"a\\"] [1 2 ])" "(apply [\\"a\\" \\"a\\"] [1 2 ])" "( [\\"a\\" \\"a\\"] [1 2 ])" "(+ [\\"a\\" \\"a\\"] [1 2 ])" "(interleave [\\"a\\" \\"a\\"] [1 2 ])" "(interleave (vec[\\"a\\" \\"a\\"] [1 2 ]))" "(vec(interleave [\\"a\\" \\"a\\"] [1 2 ]))" "(vec(apply interleave [\\"a\\" \\"a\\"] [1 2 ]))" "(vec(interleave [\\"a\\" \\"a\\"] [1 2 ]))" "(interleave [\:a \:b] (take 3 iterate inc 1))" "(interleave [\:a \:b] (take 3 (iterate inc 1)))" "(def g [1 2 3 4])" "(g 2)" "(take 3 (iterate inc 1))" "(g 2 3)" "(subvec(g 2 3))" "(subvec g 2 3)" "(subvec g 1 3)" "(apply (subvec g 1 3)(subvec g 1 3))" "(conj (subvec g 1 3)(subvec g 1 3))" "(conj (vec(subvec g 1 3)(vec(subvec g 1 3))))" "(assoc (vec(subvec g 1 3)(vec(subvec g 1 3))))" "(assoc (subvec g 1 3)(subvec g 1 3)" "(conj (subvec g 1 3)(subvec g 1 3))" "(conj (subvec g 0 1)(subvec g 1 3))" "(subvec g 0 1)" "(subvec g 0 2)" "(subvec g 1 3)" "(subvec g 2 3)" "(conj (subvec g 0 2)(subvec g 3 4))" "(subvec g 3 4)" "(subvec g 2 4)" "(conj (subvec g 0 2)(subvec g 2 4))" "(vec(interleave [\\"a\\" \\"a\\"] [1 2 ]))" "(vec(interleave [\:a \:c \:h \:s] [1 1 1 1 ]))" " (repeat 2 (take 14 (iterate inc 1)))" "   (repeat 3 (take 14 (iterate inc 1)))" "   (repeat 3  (vec(interleave [\:a \:c \:h \:s]        (take 14 (iterate inc 1)))))" "(repeat 3 [\:a] )" "    (repeat 3  [\:a]        (take 14 (iterate inc 1))))" " (repeat 3  (vec(interleave (repeat 14 \:a)       (take 14 (iterate inc 1)))))" "      (vec(interleave (repeat 14 \:a)       (take 14 (iterate inc 1))))" "   (take 2(iterate  ([\:a \:b])inc 1 )) " "(take 2(iterate  ([\:a \:b] inc 1)))" "(take 2(iterate [\:a \:b] inc 1))" "(take 2(iterate [\:a \:b] inc 1))       [\:a \:c \:h \:s]       (vec(interleave (repeat 14 \:a)       (take 14 (iterate inc 1))))" "(take 2(iterate [\:a \:b] inc 1))          (vec(interleave (repeat 28 \:a)       (take 14 (iterate inc 1))))\\n" " (take 2(iterate [\:a \:b] inc 1))(vec(interleave (repeat 28 \:a)       (take 14 (iterate inc 1))))" "(take 2(iterate [\:a \:b] inc 1))(vec(interleave (repeat 28 \:a)       (take 28 (iterate inc 1))))" "(vec(interleave (repeat 14 \:a)       (take 14 (iterate inc 1))))" " (take 2(iterate [\:a \:b] inc 1))" "(take 2(iterate [\:a \:b] inc 1))" "    (vec(interleave (repeat 14 \:a)(take 14 (iterate inc 1))))" "  (vec(interleave (repeat 14 \:a \:b)(take 14 (iterate inc 1))))" "    (take 2(iterate  inc 1))" "  ([\:a \:b](take 2(iterate  inc 1)))   " "  (assoc([\:a \:b](take 2(iterate  inc 1)))) " "(take 2(iterate  inc 1) [\:a \:b]))" "   ((take 2(iterate  inc 1))[\:a \:b])" "(vec(interleave (repeat 14 \:a )(take 14 (iterate inc 1))))\\n" "  (vec(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "(interleave [\:a \:b] (take 3 (iterate inc 1)))" "(def g [1 2 3 4])\\n(conj (subvec g 0 2)(subvec g 2 4))\\n(take 3 (iterate inc 1))" "    (vec(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "   (seq(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "    (sequence(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "(repeat 14 \:b )" "(def testlist [\:a 3])" "( get testlist \:a)" "(zipmap testlist)" "( testlist \:a)" "(\:a testlist)" "(hash-map testlist)" "(apply hash-map testlist)" "    (apply(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "      (apply hash-map(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" " (apply vec(interleave (repeat 14 \:b )(take 14 (iterate inc 1))))" "  (apply subvec(interleave (repeat 14 \:b )(take 14 (iterate inc 1)))2)" "  (interleave (repeat 14 \:b )(take 14 (iterate inc 1)))" "(def testlist [\:a 3 \:a 4])" "testlist" "(conj testlist )" "(take 14 (iterate inc 1))" "(repeat 4 (take 14 (iterate inc 1)))" "{\:a [1 2 3]}" "(interleave [\:a] [1 3 4])" "(interleave [\:a] [[1 3 4]])" "(interleave  [\:a \:b \:r \:t](repeat 4 (take 14 (iterate inc 1)))" "(interleave  [\:a \:b \:r \:t](repeat 4 (take 14 (iterate inc 1))))" "(interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1))))" "(apply hash-map(interleave [\:a] [[1 3 4]]))" "(apply hash-map(interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1)))))" "\\n(def create-deck-of-card \\n  (apply hash-map(interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1)))))\\n  )" "(rand-nth [1 2 32])" "(rand-nth  [1 2 3 4 6 7] )" "(repeat 4 (rand-nth  [1 2 3 4 6 7] ))" "\\n(repeat 4 rand-nth  [1 2 3 4 6 7] )" "(repeat (4 rand-nth  [1 2 3 4 6 7]) )" "(repeat 4( rand-nth  [1 2 3 4 6 7]) " "(repeat 4( rand-nth  [1 2 3 4 6 7]) )" "(repeatedly 4( rand-nth  [1 2 3 4 6 7]) )" "(take 5(repeatedly ( rand-nth  [1 2 3 4 6 7]) ))" "(take 5(repeatedly  rand-nth  [1 2 3 4 6 7]) )" "(repeatedly 5 \#(rand-int 11))" "(repeatedly 5 \#(rand-nth [3 4 5]))" "(repeatedly 5 \#(rand-nth [3 4 5 3 4]))" "( apply distinct(repeatedly 5 \#(rand-nth [3 4 5 3 4])))" "(apply distinct((repeatedly 5 \#(rand-nth [3 4 5 3 4]))))" "(distinct(repeatedly 5 \#(rand-nth [3 4 5 3 4])))" "(shuffle [1 2 3 4 6 7])" "deck-of-cards" "(def create-deck-of-card \\n  (apply hash-map(interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1)))))\\n  )\\n" "  ((interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1)))))" " (interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1))))" "(take 14 (iterate inc 1))" "[[1 1] [1 3]]" "(apply   [1] [1 3] )" "(assoc   [\:a] [1 3] )" "( assoc   [\:a] [1 3] )" "( assoc   [4] [1 3] )" "( assoc   ([4] [1 3]) )" "(apply  [1]  2)" "(assoc  [1]  2)" " (assoc [1 2 3] 0 10)" "(assoc  [ 1 ]  2)" "(assoc  [ 1 ]  2 3)" "(assoc  [ 1 ]  0 3)" " (reduce + [1 2 3] )" " (apply reduce + [1 2 3] )" " (apply (reduce + [1 2 3] ))" " (reduce [] [1 2 3] )\\r\\n" "(reductions + [1 1 1 1])" "(reductions 1 [1 1 1 1])" "\\r\\n(reductions +1 [1 1 1 1])" " (interleave  [\:a \:c \:h \:s ](repeat 4 (take 14 (iterate inc 1))))" "(def x [a] )" "\\n(def x [\:a] )" "x" "(def y [1 2 3])" "(assoc x y )" "(interleave x y )" "(seq x y )" "(seq apply x y )" "(for [ i range 0 2 ](y x))" "(for [ i range 0 2 ] i)" "(for [ i (range 0 2) ] i)" "(for [ i (range 0 2) ] (x i))" "(for [ i (range 0 2) ] (y i))" "(for [ i (range 0 2) ] (vec(y i)))" "\\n(for [ i (range 0 2) ]  (vec (y i)))" "(for [ i (range 0 2) ] (y i))" "(def y [8 9 3])" "(for [ i (range 0 2) ] (y i))" "( conj [\:a] [1])" "(apply conj [\:a] [1])" "(apply conj [\:a] [1 2 3 4])" "(for [ i (range 0 2) ] (apply conj  (y i)))" "(apply conj  (y 1))" "(apply conj [\:a] [1 4])" "(apply conj [\:a] [1 ])" "(for [ i (range 0 2) ] (apply conj [\:a] (y i)))" "(apply conj [\:a] (y 1))" " (apply conj [\:a] (y 1))" "(vec(y 1))" "(vec'(y 1))" "(y 1)" "(seq(y 1))" "(sequence(y 1))" "(sequence apply(y 1))" "(def y [[8] [9] [3]])" "(sequence apply(y 1))" "(y 1)" "(apply conj [\:a] (y 1))" "(for [ i (range 0 2) ] (apply conj [\:a] (y 1)))" "(for [ i (range 0 2) ] (apply conj [\:a] (y i)))" "(shuffle(for [ i (range 0 2) ] (apply conj [\:a] (y i))))" "(shuffle(for [ i (range 0 15) ] (apply conj [\:a] (range 0 15))))" "(apply conj [\:a] [1 ])" "(count (apply conj [\:a] [1 ]))" "(shuffle(for [ i (range 0 15) ] (apply conj [\:a] (y i))))" "(def y [[8] [9] [3]])" "(shuffle(for [ i (range 0 15) ] (apply conj [\:a] (y i))))" "(shuffle(for [ i (range 0 2) ] (apply conj [\:a] (y i))))" "(def cardtypes  [\:a \:c \:h \:s ])" "(for [ i (range 0 15) ] (apply conj [\:a] (range 0 15)))" "(def klop (range 0 15))" "klop" "(klop 2)" "(def klop (vec(range 0 15)))" "(klop 2)" "(for [ i (range 0 15) ] (apply conj [\:a] (klop i)))" "(for [ i (range 0 15) ] (apply conj [\:a] (klop 3)))" "(3 klop)" "(for [ i (range 0 15) ] (apply conj [\:a] (vec(klop 3))))" "(def klop (vec(vec(range 0 15))))" "(klop 2)" "klop" "(for [ i (range 0 15) ] i)" "(for [ i (range 0 15) ] (vec i))" "klop" "(conj klop [])" "(apply conj klop [])" "(apply conj [\:a] [1 ])" "(vec(apply conj [\:a] [1 ]))" "(sequence(apply conj [\:a] [1 ]))" "(vector(apply conj [\:a] [1 ]))" "(def klop (vec(vec(range 0 15))))" "klop" "(def klop (vector(vec(range 0 15))))" "klop" "(for [ i (range 0 15) ] (apply conj [\:a] (vec(klop 3))))" "(for [ i (range 0 15) ] (vector i))" "(vector(apply conj [\:a] [1 ]))" "(vector 1)" "(for [ i (range 0 15) ] (apply conj [\:a] (vector i)))" "(def cardtypes  [\:a \:c \:h \:s ])" "(cardtypes 0)\\n" "(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])" "(cardtypes 0)" "  (for[y(range 0 5)] (for [ i (range 0 15) ] (apply conj ( cardtypes y) (vector i))))" "  (for[y(range 0 4)] (for [ i (range 0 15) ] (apply conj ( cardtypes y) (vector i))))" " (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( cardtypes y) (vector i))))" "\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )" "(create-deck-of-card [[\:a] [\:c] [\:h] [\:s] ] )" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )" "(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])" "(defn create-deck-of-card cardtypes)" "(defn create-deck-of-card [\:a])" "(defn create-deck-of-card [[\:a]])" "cardtypes" "  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )" "(create-deck-of-card [\:a \:b \:g \:p])" "(ns blackjack.domain)\\n\\n(def deck-of-cards {\:2 1})\\n\\n\\n\\n\\n\\ndeck-of-cards\\n\\n\\n(zipmap   [\:a \:c \:h \:s ]   (repeat 4 1))\\n\\n\\n\\n\\n\\r\\n(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )\\n\\n\\n\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )\\n\\n\\n\\n(create-deck-of-card [\:a \:b \:g \:p])\\n\\n\\n(take 14 (iterate inc 1))\\r\\n(apply hash-map(interleave [\:a] [[1 3 4]]))\\n\\n\\n\\n(take 5(repeatedly  rand-nth  [1 2 3 4 6 7]) )\\n\\n(distinct(repeatedly 5 \#(rand-nth [3 4 5 3 4])))\\r\\n\\n(shuffle [1 2 3 4 6 7])\\n\\n(assoc  [ 1 ]  0 3)\\n\\n (reduce [] [1 2 3] )\\r\\n\\n\\r\\n(reductions +1 [1 1 1 1])\\r\\n\\n(def x [\:a] )\\nx\\n\\n(def y [[8] [9] [3]])\\n\\n(seq apply x y )\\n\\n(def klop (vector(vec(range 0 15))))\\n( [\:a] )\\nklop\\n\\n(for [ i (range 0 15) ] (vector i))\\n\\n\\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( cardtypes y) (vector i))))\\n(vector(apply conj [\:a] [1 ]))\\n(vector 1)\\n(y 1)\\n\\n(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])\\n(defn create-deck-of-card [[\:a]])\\ncardtypes\\n(cardtypes 0)\\n(create-deck-of-card [[\:a] [\:c] [\:h] [\:s] ] )" "(create-deck-of-card [[\:a] [\:c] [\:h] [\:s] ] )" "[[\:a] [\:c] [\:h] [\:s] ]" "(create-deck-of-card cardtypes )" "(def shufflecards shuffle((create-deck-of-card cardtypes )) )" "(def shufflecards (shuffle((create-deck-of-card cardtypes )) ))" "(shuffle((create-deck-of-card cardtypes )) )" "(create-deck-of-card cardtypes " "(create-deck-of-card cardtypes )" "(shuffle(create-deck-of-card cardtypes ))" "(shuffle [[\:f] [\:r] [\:o]])" "(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])" "(create-deck-of-card cardtypes )" "(shuffle(conj(create-deck-of-card cardtypes )) )" "(assoc [[\:f] [\:r] [\:o]])" "(conj [[\:f] [\:r] [\:o]])" "(conj ([\:f] [\:r] [\:o]) ([\:z]))" "(conj [[\:f] [\:r] [\:o]] [[\:z]])" "(apply conj [[\:f] [\:r] [\:o]] [[\:z]])" "(shuffle(apply conj(create-deck-of-card cardtypes )) ))" "(shuffle(apply conj(create-deck-of-card cardtypes )) )" "(apply conj(create-deck-of-card cardtypes )" "(apply conj(create-deck-of-card cardtypes ))" "(create-deck-of-card cardtypes )" "(apply conj(create-deck-of-card cardtypes ))" "( conj(create-deck-of-card cardtypes ))" "(apply conj(create-deck-of-card cardtypes ))" "((create-deck-of-card cardtypes )0)" "(0(create-deck-of-card cardtypes ))" "(get(create-deck-of-card cardtypes )0)" "(conj (([\:a \:r]) ([\:d \:u])) )" "(apply conj (([\:a \:r]) ([\:d \:u])) )" "([\:a \:g])" "((create-deck-of-card cardtypes ))" "(create-deck-of-card cardtypes )" "(vector(create-deck-of-card cardtypes ))" "(into (create-deck-of-card cardtypes ))" "( 1(create-deck-of-card cardtypes ))" "( (create-deck-of-card cardtypes )1)\\n" "( (create-deck-of-card cardtypes )0)" "( get-in(create-deck-of-card cardtypes)0)" "(vector(create-deck-of-card cardtypes))" "(0(vector(create-deck-of-card cardtypes)))" "((vector(create-deck-of-card cardtypes))0)" "(((vector(create-deck-of-card cardtypes))0)0)" "((vector(create-deck-of-card cardtypes)))" "(vector(create-deck-of-card cardtypes))" "(create-deck-of-card cardtypes)" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vec(apply conj ( re y) (vector i)))))\\n  )\\n" "(create-deck-of-card [\:a \:b \:g \:p])" "(ns blackjack.domain)\\n\\n(def deck-of-cards {\:2 1})\\n\\n\\n\\n\\n\\ndeck-of-cards\\n\\n\\n(zipmap   [\:a \:c \:h \:s ]   (repeat 4 1))\\n\\n\\n\\n\\n\\r\\n(defn repeatfive [x]\\r\\n  (repeat 5 x)\\r\\n  )\\n\\n\\n\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vec(apply conj ( re y) (vector i)))))\\n  )\\n\\n\\n\\n(create-deck-of-card [\:a \:b \:g \:p])\\n\\n\\n(take 14 (iterate inc 1))\\r\\n(apply hash-map(interleave [\:a] [[1 3 4]]))\\n\\n\\n\\n(take 5(repeatedly  rand-nth  [1 2 3 4 6 7]) )\\n\\n(distinct(repeatedly 5 \#(rand-nth [3 4 5 3 4])))\\r\\n\\n(shuffle [1 2 3 4 6 7])\\n\\n(assoc  [ 1 ]  0 3)\\n\\n (reduce [] [1 2 3] )\\r\\n\\n\\r\\n(reductions +1 [1 1 1 1])\\r\\n\\n(def x [\:a] )\\nx\\n\\n(def y [[8] [9] [3]])\\n\\n(seq apply x y )\\n\\n(def klop (vector(vec(range 0 15))))\\n( [\:a] )\\nklop\\n\\n(for [ i (range 0 15) ] (vector i))\\n\\n\\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vec(apply conj ( cardtypes y) (vector i)))))\\n(vector(apply conj [\:a] [1 ]))\\n(vector 1)\\n(y 1)\\n\\n(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])\\n(defn create-deck-of-card [[\:a]])\\ncardtypes\\n(cardtypes 0)\\n\\n\\n(create-deck-of-card cardtypes)\\n\\n(apply conj (([\:a \:r]) ([\:d \:u])) )\\n\\n\\n\\n(def shufflecards ((shuffle(apply conj(create-deck-of-card cardtypes )) ))\\n(apply conj [[\:f] [\:r] [\:o]] [[\:z]])" "\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vector(apply conj ( re y) (vector i)))))\\n  )" "(create-deck-of-card [\:a \:b \:g \:p])" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )" "(create-deck-of-card [\:a \:b \:g \:p])" "(create-deck-of-card cardtypes)" "\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vec(apply conj ( re y) (vector i)))))\\n  )" "(create-deck-of-card cardtypes)" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (vector(apply conj ( re y) (vector i)))))\\n  )" "(create-deck-of-card cardtypes)" "(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )\\n" "(create-deck-of-card cardtypes)" "(count(create-deck-of-card cardtypes))" "(5(create-deck-of-card cardtypes))" "((create-deck-of-card cardtypes)0)" "(create-deck-of-card cardtypes)" "(def hi (([\:3 2])))" "(def hi ([\:3 2]))" "\\n(1 2 3)" "(1 2 3)" "(list 1 2 3)" "(conj (list 1 2 3) (list 2 3 4))" "(aplly conj (list 1 2 3) (list 2 3 4))" "(apply conj (list 1 2 3) (list 2 3 4))" "(list [\:a])" "(def list1 (list [\:a]))" "(def list2 (list [\:b]))" "(conj list1 list2)" "(apply conj list1 list2)" "\\n(create-deck-of-card cardtypes)" "(list1 3 )" "(9 list1)" "(vals list1)" "(into [] list1 list2)" "(into [] list1)" "\\n(into ()(create-deck-of-card cardtypes))" "\\n(create-deck-of-card cardtypes)" "(subvec(create-deck-of-card cardtypes)0)" "(create-deck-of-card cardtypes)" "\\n(list [\:a 2] [\:a 3] [\:a 4] [\:a 5] [\:a 6] [\:a 7] [\:a 8] [\:a 9] [\:a 10] [\:a 11] [\:a 12] [\:a 13] [\:a 14])" "(list(list [\:a 2] [\:a 3] [\:a 4] [\:a 5] [\:a 6] [\:a 7] [\:a 8] [\:a 9] [\:a 10] [\:a 11] [\:a 12] [\:a 13] [\:a 14]))" "((list(list [\:a 2] [\:a 3] [\:a 4] [\:a 5] [\:a 6] [\:a 7] [\:a 8] [\:a 9] [\:a 10] [\:a 11] [\:a 12] [\:a 13] [\:a 14]))0)" "\\n(create-deck-of-card cardtypes)" "(first(create-deck-of-card cardtypes))" "(apply conj(first(create-deck-of-card cardtypes))(second(create-deck-of-card cardtypes)))" "(count(apply conj(first(create-deck-of-card cardtypes))(second(create-deck-of-card cardtypes))))" "(nth(create-deck-of-card cardtypes) 2)" "(for[ u (range 0 3)] (nth(create-deck-of-card cardtypes) u))" "(count(for[ u (range 0 3)] (nth(create-deck-of-card cardtypes) u)))" "\\n(apply conj(for[ u (range 0 3)] (nth(create-deck-of-card cardtypes) u)))" "(first(apply conj(for[ u (range 0 3)] (nth(create-deck-of-card cardtypes) u))))" "(apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) )" " (apply conj (apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) ) (apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes))3 ))" "(apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) )" "(apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes))3 )" "(apply conj (nth(create-deck-of-card cardtypes)2)" "(nth(create-deck-of-card cardtypes)2)" "(nth(create-deck-of-card cardtypes)3)" "(apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) ))" "(apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes))" "(apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) )" "(apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) )" " (apply conj (apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) ) (apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) ))" "(shuffle (apply conj (apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) ) (apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) )))" "(count(shuffle (apply conj (apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) ) (apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) ))))" "(for [r (range 0 3)] r)" "(for [r (range 0 2)] r)" "(for [r (range 0 2)] (+ r 1))" "(repeat 2 (for [r (range 0 2)] (+ r 1)))" "(reduce conj [[1 2 3] [4 5 6]])" "(reduce conj [[1 2 3] [4 5 6] [7 8 9]])" "(apply reduce conj [[1 2 3] [4 5 6] [7 8 9]])" "(reduce apply conj [[1 2 3] [4 5 6] [7 8 9]])" "(def shufflecards (shuffle (apply conj (apply conj (first(create-deck-of-card cardtypes)) (second(create-deck-of-card cardtypes)) ) (apply conj (nth(create-deck-of-card cardtypes)2) (nth(create-deck-of-card cardtypes)3) ))))" "(def shufflecards (shuffle (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) ))))\\n" "\\n(defn create-deck-of-card [re] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( re y) (vector i))))\\n  )\\n(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])\\n\\n\\n\\n\\n(def shufflecards (shuffle (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) ))))\\n\\n\\n\\n\\n\\n\\n" "shufflecards" "(count (shufflecards)" "(count (shufflecards))" "(count shufflecards)" "\\n(def cards  (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) )))" "(count cards)" "(first cards)" "(shuffle cards)" "(first cards)" "(shuffle cards)" "(first cards)" "(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])\\n(defn create-deck-of-card [ct] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( ct y) (vector i))))\\n  )" "(shuffle cards)" "(assoc []  (shuffle cards))" "(conj []  (shuffle cards))" "(count(conj []  (shuffle cards)))" "(def cards  (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) )))\\n" "cards" "(def g (shuffle cards))" "g" "(def g (shuffle cards))" "g" "(def cardtypes  [[\:a] [\:c] [\:h] [\:s] ])\\n(defn create-deck-of-card [ct] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( ct y) (vector i))))\\n  )\\n\\n\\n\\n\\n\\n(def cards  (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) )))\\n\\n\\ncards\\n\\n(def g (shuffle cards))\\n\\n\\ng\\n\\n(count cards)\\n \\n(first cards)" "(defn create-deck-of-card [ct] \\n  (for[y(range 0 4)] (for [ i (range 2 15) ] (apply conj ( ct y) (vector i))))\\n  )" "(create-deck-of-card cardtypes)" "(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )" "(create-deck-of-card cardtypes)" "(defn create2 [ct]\\n  (for [t ct\\n        i (range 2 15)]\\n    [t i]))" "(create2 ct)" "(create2 cardtypes)" "(def cardtypes  [\:a \:c \:h \:s])" "(create2 cardtypes)" "(for [i (range 1 5)\\n      j [\:a \:b \:c]]\\n [i j])" "(defn create2 [ct]\\n  (for [t ct\\n        i (range 2 15)]\\n    [t i]))" "create2" "(defn create2 [ct]\\n  (for [t ct\\n        i (range 2 15)]\\n    [t i]))" "create2" "(shuffle create2)" "def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 2 15)]\\n    [t i]))\\n\\n\\n(def cards  (apply conj (apply conj (first(create-deck-of-card cardtypes)) \\n        (second(create-deck-of-card cardtypes)) ) \\n             (apply conj (nth(create-deck-of-card cardtypes)2) \\n                  (nth(create-deck-of-card cardtypes)3) )))\\n\\n\\ncards\\n\\n(def g (shuffle cards))\\n\\n\\ng\\n\\n(count cards)\\n \\n(first cards)" "cardtypes" "\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\n" "(create2 cardtypes)" "(count(create2 cardtypes))" "(def cards (shuffle (create2 cardtypes)))" "cards" "(def cards (shuffle (create2 cardtypes)))" "cards" "(def dealer-hand [])" "(def player-hand [])" "player-hand" "(assoc player-hand [\:a 1])" "(apply assoc player-hand [\:a 1])" "(conj player-hand [\:a 1])" "player-hand" "(clojure.core/ns blackjack.model)\\n(count cards)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n\\n(def cards (shuffle (create2 cardtypes)))\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\n\\n(def cards (shuffle (create2 cardtypes)))\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(count cards)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(def dealer-hand [])\\n(def player-hand [])\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n( for[y [[\:h 9] [\:s 4]]]  y )\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n( for[y [[\:h 9] [\:s 4]]]  (y 1) )\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(sort( for[y [[\:h 9] [\:s 4]]]  (y 1) ))\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(sort( for[y cards] (y 1)))\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n  (filter \#(\= 1 %) 1)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-had [crd]\\n  \\n  (sort( for[y cards] (y 1)))\\n  \\n  (let [ace crd]  (sort( for[y cards] (y 1))))\\n  \\n  \\n  \\n  \\n  )\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(callculate-had card)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(callculate-had cards)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(defn callculate-had [crd]\\n  \\n\\n    (let [ace crd]  (sort( for[y cards] (y 1))))\\n  \\n  \\n  \\n  \\n  \\n  \\n  )\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(callculate-had cards)\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(defn callculate-had [crd]\\n  \\n\\n    (let [ace crd]  (sort( for[y cards] (y 1))))\\n    (filter \#(\= 1 %) ace)\\n  \\n  \\n  \\n  \\n  \\n  )\\n(clojure.core/ns blackjack.domain)" "(clojure.core/ns blackjack.model)\\n(defn callculate-had [crd]\\n  \\n\\n(filter \#( \=  1 %) (let [ace crd]  (sort( for[y cards] (y 1))))\\n\\n   )\\n(clojure.core/ns blackjack.domain)" "\\n(defn callculate-had [crd]\\n  \\n\\n(filter \#( \=  1 %) (let [ace crd]  (sort( for[y cards] (y 1))))\\n\\n   ))\\n" "(callculate-had cards)" "(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  )\\n(filter \#(\= 1 %)ace)\\n   \\n )" "(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  \\n(filter \#(\= 1 %)ace)\\n   \\n ))" "(callculate-had cards)" "\\n(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  \\n(filter \#(not\= 1 %)ace)\\n\\n\\n   \\n ))\\n" "(callculate-had cards)" "\\n(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rest (filter \#(not\= 1 %)ace) ]\\n  (+ (max totalace) (max rest))\\n\\n\\n   \\n )))\\n" "(callculate-had cards)" "\\n(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rest (filter \#(not\= 1 %)ace) ]\\n  (+ (max totalace) (max rest))\\n\\n\\n   \\n )))" "\\n(callculate-had cards)" "\\n(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(not\= 1 %)ace) ]\\n  (+ (count totalace) (count rt))\\n\\n\\n   \\n )))" "(callculate-had cards)" "(list 1 2)" "(apply +(list 1 2))" "(apply +(list 1 20))\\n" "(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y cards] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(not\= 1 %)ace) ]\\n  (+ (apply + totalace) (apply + rt))\\n\\n\\n   \\n )))" "(callculate-had cards)" "\\n(defn callculate-had [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(not\= 1 %)ace) ]\\n  (+ (apply + totalace) (apply + rt))\\n\\n\\n   \\n )))" "(callculate-had cards)" "  (filter \#(\= (range 2 10) %) (1 2 4 15))" "  \\n  (filter \#(\= (range 2 10) %) (list 1 2 4 15))" "  (filter \#(not\= (range 2 10) %) (list 1 2 4 15))" "(range 2 10)" "  (filter \#(\= (range 2 10) %) (list 1 2 4 15))" "  (filter \#(< 11 %) (list 1 2 4 15))" "  (filter \#(> 11 %) (list 1 2 4 15))" "  (filter \#(> 11 %) (list 1 2 4 10 15))" "  \\n  (filter \#(> 11 %) (list 1 2 4 10 15))\\n" "(apply +  (filter \#(> 11 %) (list 1 2 4 10 15)))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n   (cond \\n     (\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n        (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10))\\n    \\n    \\n    \\n    \\n    ) )\\n\\n\\n   \\n ))))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n   (cond \\n     (\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n        (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n    \\n    \\n    \\n    \\n    ) )" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n   (cond \\n     (\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n        (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n    \\n    \\n    \\n    \\n    ) )\\n\\n\\n   \\n ))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n   (cond \\n     (\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n        (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n    \\n    \\n    \\n    \\n    ) )\\n\\n\\n   \\n )))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (if(\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n      (if  (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n    \\n    \\n    \\n    \\n    ) )\\n\\n\\n   \\n )))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (if(\= ((\= countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10)\\n      (if  (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n    \\n    \\n    \\n    \\n    ) )\\n\\n\\n   \\n ))))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (+ sumofKQJ sumOfNormalCards)\\n      \\n     )))\\n " "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (+ sumofKQJ sumOfNormalCards)\\n      \\n     ))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (+ sumofKQJ sumOfNormalCards)\\n      \\n     ))))" "(callculate-had cards)" "(callculate-had [\:a 1 [\:a 10]])" "(callculate-had [[\:a 1 [\:a 10]]])" "(callculate-had [[\:a 2 [\:a 10]]])" "(callculate-had [[\:a 2 [\:a 3]]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (+ sumofKQJ sumOfNormalCards)\\n      \\n     ))))" "(callculate-had [[\:a 2 [\:a 3]]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(< 11 %) rt))] \\n\\n     (list sumOfNormalCards)\\n      \\n     ))))" "(callculate-had [[\:a 2 [\:a 3]]])" "(apply +(filter \#(< 11 %) (list 2 3)))" "(apply +(filter \#(> 11 %) (list 2 3)))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(> 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     (list sumOfNormalCards)\\n      \\n     ))))\\n " "(callculate-had [[\:a 2 [\:a 3]]])" "(callculate-had [[\:a 2] [\:a 5]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     (list sumOfNormalCards)\\n      \\n     ))))\\n " "(callculate-had [[\:a 2] [\:a 5]])" "(callculate-had [[\:a 2] [\:a 14]])" "(apply +(filter \#(> 11 %) (list 2 3 11)))" "(apply +(filter \#(> 11 %) (list 2 3 14)))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     (list sumOfNormalCards)\\n      \\n     ))))" "(callculate-had [[\:a 2] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     \\n      \\n     )(+ 2 4))))" "(callculate-had [[\:a 2] [\:a 14]])" "(callculate-hand [[\:a 1] [\:a 11]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     (list sumOfNormalCards)\\n      \\n     ))))" "(callculate-hand [[\:a 2] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n     (vector sumOfNormalCards)\\n      \\n     ))))" "(callculate-hand [[\:a 2] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] \\n\\n  \\n      \\n     ))))" "(callculate-hand [[\:a 2] [\:a 14]])" "(callculate-hand [\:a 2] [\:a 14])\\n  " "(callculate-hand [[\:a 2] [\:a 14]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ]\\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5)  ))))" "(callculate-hand [[\:a 2] [\:a 14]])" "(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\n\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  \\n  \\n  \\n  \\n  )\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] (+ totalace 100) )))\\n  \\n ; (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5)  ))))\\n \\n\\n\\n   \\n(apply +(filter \#(> 11 %) (list 2 3 14)))\\n(callculate-hand [[\:a 2] [\:a 14]])\\n  \\n  \\n;(apply +  (filter \#(> 11 %) (list 1 2 4 10 15)))\\n;(\= (countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10))))\\n   ; (if  (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n;(apply +(list 1 20))\\n" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] (+ totalace 100) )))" "(callculate-hand [[\:a 2] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] (+ 3 100) )))" "(callculate-hand [[\:a 2] [\:a 14]])" "(callculate-hand cards)" "(callculate-hand [[\:a 2] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] (+ totalace 100) )))" "(callculate-hand [[\:a 2] [\:a 14]])" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] (+ (apply + totalace) 100) )))" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5) ))))" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace) sumofKQJ  sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5) ))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace) sumofKQJ  sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] ))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace)] (+ 6 7)))))" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace)] (+ countoface 7)))))" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] \\n  (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt)))] (+ countoface 7)))))" "(callculate-hand cards)" "(filter \#((range 2 11) %) (list 1 2 4 10 15))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#((range 2 11) %)ace) ] rt ))) " "(callculate-hand cards)" "(filter \#((range 2 11) %) (list 1 2 4 10 15))" " (filter \#(\= 1  %) (list 1 2 4 10 15))" "  \\n (filter \#(or 1  %) (list 1 2 4 10 15))" " (filter \#(or 2  %) (list 1 2 4 10 15))" " (filter \#(< 11  %) (list 1 2 4 10 15))" " (filter \#(> 2  %) (list 1 2 4 10 15))" " (filter \#(not> 2  %) (list 1 2 4 10 15))" " (filter \#(< 2  %) (list 1 2 4 10 15))" " (filter \#(< 1  %) (list 1 2 4 10 15))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] rt ))) " "(callculate-hand cards)" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ ()] (+ countoface 7))) ))" "(callculate-hand cards)" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt)))] (+ countoface 7))) ))" "(callculate-hand cards)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt)))] (+ sumofKQJ 7))) ))\\n " "(callculate-hand cards)" "(callculate-hand [[\:3]])" "(callculate-hand [[\:3] [\:14]])" "(callculate-hand cards)" "(callculate-hand [[\:a 1] [\:a 14]])" "\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] (+ sumofKQJ 7))) ))" "(callculate-hand [[\:a 1] [\:a 14]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] (+ sumOfNormalCards7))) ))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] (+ sumOfNormalCards 7))) ))" " (filter \#(< 1  %) (list 1 2 4 10 15))" "(callculate-hand [[\:a 1] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(\= totalace 1)10))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 1] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(\= countoface 1)10))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 1] [\:a 14]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(\= countoface 1)100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 1] [\:a 14]])" "(callculate-hand [[\:a 2] [\:a 14]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(\= countoface 1)100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 3] [\:a 14]])" "(callculate-hand [[\:a 1] [\:a 14]])" "(callculate-hand [[\:a 1] [\:a 4] [\:a 14]])" "(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(\= countoface nil)100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))" "(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])" "(clojure.core/ns blackjack.model)\\n(ns blackjack.model)\\n\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\n\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  \\n  \\n  \\n  \\n  )\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))\\n \\n  ;(let  [countoface (count totalace) sumofKQJ ()] (+ countoface 7)))))\\n  \\n ; (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5)  ))))\\n \\n\\n\\n   \\n(apply +(filter \#(> 11 %) (list 2 3 14)))\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n ; * 10(count(filter \#(< 11 %) rt))) \\n; sumOfNormalCards  (apply +(filter \#(> 11 %) rt))\\n  \\n (filter \#(< 1  %) (list 1 2 4 10 15))\\n;(\= (countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10))))\\n   ; (if  (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n;(apply +(list 1 20))\\n\\n(clojure.core/ns model)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n(clojure.core/ns model)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n(clojure.core/ns model)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(clojure.core/ns model)" "[6 7 8 ]" "(8 9 0)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(clojure.core/ns model)" "(clojure.core/ns blackjack.model)\\ncardtypes\\n(clojure.core/ns model)" "(defn foo\\n  \\"I don't do a whole lot.\\"\\n  [x]\\n  (println x \\"Hello, World\!\\"))\\n" "foo" "(foo jj)" "(foo \\"lop\\")" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\ncardtypes\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  \\n  \\n  \\n  \\n  )\\n\\n(list 2 4 5)\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )100))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))\\n \\n  ;(let  [countoface (count totalace) sumofKQJ ()] (+ countoface 7)))))\\n  \\n ; (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt))] (+ 4 5)  ))))\\n \\n\\n\\n   \\n(apply +(filter \#(> 11 %) (list 2 3 14)))\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n ; * 10(count(filter \#(< 11 %) rt))) \\n; sumOfNormalCards  (apply +(filter \#(> 11 %) rt))\\n  \\n (filter \#(< 1  %) (list 1 2 4 10 15))\\n;(\= (countoface 1) (> (+ sumofKQJ sumOfNormalCards) 11))(+ sumofKQJ sumOfNormalCards 10))))\\n   ; (if  (\= ((\= countoface 2) (> (+ sumofKQJ sumOfNormalCards) 2)))((+ sumofKQJ sumOfNormalCards 10)\:else (+ 30 sumofKQJ sumOfNormalCards)\\n;(apply +(list 1 20))\\n\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0) (if(\= 1 countoface) 10))\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0 if(\= 1 countoface) 10) ) )\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) )\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0 (if(\= 1 countoface) 10) ) )\\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 14]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(callculate-hand [[\:a 7] [\:a 4] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0 (if(\= (\= 1 countoface) (< (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 10 1) ) )  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 7] [\:a 4] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0 (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 10 1) ) )  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 7] [\:a 4] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards (if(zero? countoface )0 (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 1 10) ) )  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 7] [\:a 4] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 7] [\:a 4] [\:a 10]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 7] [\:a 4] [\:a 12]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 2] [\:a 2] [\:a 12]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 1 10) ) )  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 2] [\:a 2] [\:a 12]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 2] [\:a 1] [\:a 12]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 2] [\:a 1] [\:a 3]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 1 10)\\n                                                                                               \\n                                                                                               \\n                                                                   (if(\= (\= 2 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 ) ) 1 10)                            ) )  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+   4 (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) ))  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) )3 ))  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) ) 3)  \\n                                                                )) ))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\=  2 countoface) (> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) \\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1] [\:a 2]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                        8; (if(\=  2 countoface) (> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) \\n(clojure.core/ns blackjack.core)" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 2]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 2]])" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 100 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 100)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (not\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 100)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (not\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) )" "                                                                )) )\\n (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 11)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)))  " "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (< (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)))  \\n                                                                )) )" "\\n (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" " (callculate-hand [[\:a 1] [\:a 2] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                         (if(\= (\=  2 countoface) (> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)))  \\n                                                                )) )" " (callculate-hand [[\:a 1] [\:a 2] [\:a 3]])" " (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= (\= 1 countoface) (> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) ) )\\n                                                                       )))))" "                                                                       )))))\\n (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" " (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" "(defn kl [o]\\n  \\n  \\n  \\n  )" "\\n(defn kl [o]\\n  (if(\= o 1) 1(if(\= o 2) 2 (if(\= o 3) 3 )\\n  \\n  \\n  )))" " (kl 2)" " (kl 1)" " (kl 4)" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface)(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10)  \\n                                                                                               (if(\= 2 countoface)(> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)) )\\n                                                                       )))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface)(if(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10)  \\n                                                                                               (if(\= 2 countoface)(if(> (+ sumofKQJ sumOfNormalCards 20) 21 )) 20 10)) )\\n                                                                       )))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface)(if(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10)  ))))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface) 1 (if(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10)  ))))))\\n                                                                                                )" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface) 1 3)))))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ \\n                                                                     (if(\= 1 countoface) 1 3)))))))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) 1 3)))))))))" " (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" " (callculate-hand [[\:a 2] [\:a 1] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) 10 1))))))))" " (callculate-hand [[\:a 2] [\:a 1] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10)) 1))))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 )) 1 10) 1)))))))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) 1))))))))" " (filter \#(< 1  %) (list 1 2 4 10 15))" " (callculate-hand [[\:a 2] [\:a 1] [\:a 3]])" " (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) 20))))))))" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) 20)))))))))" " (callculate-hand [[\:a 2] [\:a 2] [\:a 3]])" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2)  20)))))))))" " (callculate-hand [[\:a 1] [\:a 1] [\:a 3]])" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2)  25)))))))))" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1]])" "(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2) (if(\= 3 countoface) 3)))))))))" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2) (if(\= 3 countoface) 3))))))))))" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1]])" "\\n(defn callculate-hand [crd]\\n  \\n\\n (let [ace (sort( for[y crd] (y 1)))]  \\n(let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n                                                                \\n                                                                \\n                                                                (+ sumOfNormalCards sumofKQJ (if(zero? countoface )0 (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                                                                     (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2) (if(\= 3 countoface) 3  (if(\= 4 countoface) 4)))))))))))" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1]])" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1] [\:a 1]])" " (callculate-hand [[\:a 1] [\:a 1] [\:a 1] [\:a 1] [\:a 10]])" "(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n (callculate-hand [[\:a 1] [\:a 1] [\:a 1] [\:a 1] [\:a 10]])" " (callculate-hand [[\:a 1] [\:a 10]])" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 10]])" "\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 2) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 10]])" "\\n\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 11 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 10]])" "(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 2 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 10]])" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 1]])" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 4]])" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 4] [\:a 6]])" " (callculate-hand [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]])" " (defn is-valid-hand? [hand]\\n  (\=< (callculate-hand hand) 21)\\n   \\n   \\n   )" " \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21)\\n   \\n   \\n   )" "(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]])" "cards" "  (conj (cards 1) (cards 2))" "  (apply conj (cards 1) (cards 2))" "  (apply conj (vec(cards 1)) (vec(cards 2)))" "  (conj (vec(cards 1)) (vec(cards 2)))" "  (assoc (vec(cards 1)) (vec(cards 2)))" "(assoc (cards 1) (cards 2))" "  (cards 1)" "  (apply conj [] (cards 1) (cards 2))" "  ( conj [] (cards 1) (cards 2))" "(is-valid-hand?   ( conj [] (cards 1) (cards 2)))" "(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6] [\:a 6]])" "(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6] [\:a 6] [\:u 2]])" "  ( conj [] [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (cards 2))" "cards\\n" "  ( conj into [] [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (cards 2))" " (  into  [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (cards 2))" " (  into []  [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (cards 2))" "  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vec(cards 2)))" "  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2)))" " (callculate-hand   (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2))))" "(def counter 1)" "counter" "( inc counter)" "(def cardtypes  [\:a \:c \:h \:s])" "(ns blackjack.model \:require [noir.session \:as session])\\n\\n(def counter 0)\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\ncardtypes\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2)))\\n  \\n  \\n  (cards 1)\\n  )\\n\\n(list 2 4 5)\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 2 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n (callculate-hand   (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2))))\\n \\n \\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))\\n \\n \\n(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6] [\:a 6] [\:u 2]])\\n\\n" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(def counter 0)\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\ncardtypes\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2)))\\n  \\n  \\n  (cards 1)\\n  )\\n\\n(list 2 4 5)\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) 2 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n (callculate-hand   (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2))))\\n \\n \\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))\\n \\n \\n(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6] [\:a 6] [\:u 2]])\\n\\n\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0))2 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1]  [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(def counter 0)\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(defn create-deck-of-card [ct] \\n  (for[y ct] (for [ i (range 2 15) ] (apply conj y (vector i))))\\n  )\\n\\n(defn create2 [ct]\\n  (for [t ct\\n        i (range 1 15)]\\n    [t i]))\\n\\ncardtypes\\n(def cards (shuffle (create2 cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn insertCardIntoHand  [person card] \\n  \\n  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2)))\\n  \\n  \\n  (cards 1)\\n  )\\n\\n(list 2 4 5)\\n\\n  (sort( for[y cards] (y 1)))\\n\\n(conj player-hand [\:a 1])\\nplayer-hand\\n\\n\\n\\n\\n(sort( for[y cards] (y 1)))\\n\\n\\n\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n (callculate-hand   (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2))))\\n \\n (callculate-hand [[\:a 1] [\:a 1]  [\:a 1]])\\n \\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))\\n \\n \\n(is-valid-hand? [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6] [\:a 6] [\:u 2]])\\n\\n\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n (callculate-hand [[\:a 1] [\:a 1]  [\:a 1]])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(def init-state {\:board shuffeled-cards \:counter counter \:dealer-hand dealer-hand \:player-hand player-hand})\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn create-deck-of-card [ct]\\n  (for [t ct\\n        i (range 1 14)]\\n    [t i]))\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(def cardtypes  [\:a \:c \:h \:s])\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n( inc counter)\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\ndef shuffeled-cards (shuffle (create-deck-of-card cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\n(clojure.core/ns blackjack.core)" "(clojure.core/ns blackjack.model)\\n(defn insertCardIntoHand  [person card] \\n  \\n  (  into   [[\:a 1] [\:a 1]  [\:a 1] [\:a 6] [\:a 6]] (vector(cards 2)))\\n(clojure.core/ns blackjack.core)" "(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))" "(defn reset-game\! []\\r\\n  (session/put\! \:game-state init-state))" "(ns blackjack.model \:require [noir.session \:as session])\\n\\n(def counter 0)\\n\\n\\r\\n(def init-state {\:board shuffeled-cards \:counter counter \:dealer-hand dealer-hand \:player-hand player-hand})\\n(defn reset-game\! []\\r\\n  (session/put\! \:game-state init-state))\\r\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n\\n\\n(defn create-deck-of-card [ct]\\n  (for [t ct\\n        i (range 1 14)]\\n    [t i]))\\n\\ncardtypes\\n(def shuffeled-cards (shuffle (create-deck-of-card cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\ncards\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))\\n \\n \\n\\n\\n" "cards" "(def shuffeled-cards (shuffle (create-deck-of-card cardtypes)))" "cards" "(def shuffeled-cards (shuffle (create-deck-of-card cardtypes)))" "cards" "(count cards)" "(1 [ 1 4 4])" "([ 1 4 4] 4)" "\\n (cards 1)" " (1 cards)" " (get-next-card []\\n     (let [ data (session/get \:game-state) intstate (\:counter data ) ]  (vector ((\:cards data ) intstate))  )\\n               \\n )\\n " " (defn get-next-card []\\n     (let [ data (session/get \:game-state) intstate (\:counter data ) ]  (vector ((\:cards data ) intstate))  )\\n               \\n )" "(ns blackjack.model \:require [noir.session \:as session])\\n\\n(def counter 0)\\n\\n\\r\\n(def init-state {\:cards shuffeled-cards \:counter counter \:dealer-hand dealer-hand \:player-hand player-hand})\\n(defn reset-game\! []\\r\\n  (session/put\! \:game-state init-state))\\r\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n\\n\\n(defn create-deck-of-card [ct]\\n  (for [t ct\\n        i (range 1 14)]\\n    [t i]))\\n\\ncardtypes\\n(def shuffeled-cards (shuffle (create-deck-of-card cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))\\n \\n \\n (defn get-next-card []\\n     (let [ data (session/get \:game-state) intstate (\:counter data ) ]  (vector ((\:cards data ) intstate))  )\\n               \\n )\\n " " (defn get-next-card []\\n     (let [ data (session/get \:game-state)  intstate (\:counter data ) ]  (vector ((\:cards data ) intstate))  )\\n               \\n )" "(ns blackjack.model \:require [noir.session \:as session])" "(ns blackjack.model \:require [noir.session \:as session])\\n\\n(def counter 0)\\n\\n\\r\\n(def init-state {\:cards shuffeled-cards \:counter counter \:dealer-hand dealer-hand \:player-hand player-hand})\\n(defn reset-game\! []\\r\\n  (session/put\! \:game-state init-state))\\r\\n\\n( inc counter)\\n(def cardtypes  [\:a \:c \:h \:s])\\n\\n\\n(defn create-deck-of-card [ct]\\n  (for [t ct\\n        i (range 1 14)]\\n    [t i]))\\n\\ncardtypes\\n(def shuffeled-cards (shuffle (create-deck-of-card cardtypes)))\\n(def dealer-hand [])\\n(def player-hand [])\\n(count cards)\\n\\n(defn callculate-hand [crd]\\n  (let [ace (sort( for[y crd] (y 1)))]  \\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 11 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\n         (+ sumOfNormalCards sumofKQJ \\n            (if(zero? countoface )0 \\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\n                      (if(\= 3 countoface) 3  \\n                        (if(\= 4 countoface) 4)))))))))))\\n \\n (defn is-valid-hand? [hand]\\n  (<\= (callculate-hand hand) 21))" "(defn get-cards []\\r\\n  (\:cards (session/get \:game-state)))" "( swap\! counter inc)" "(assoc [[\:a 4]] [[\:a 6]]  )" "(apply assoc [[\:a 4]] [[\:a 6]]  )" "( into [[\:a 4]] [[\:a 6]]  )" "(assoc counter inc)" "(assoc (counter inc)0)" "(defn hit-me []\\r\\n  ( into get-player-hand   (vector(get-cards get-counter))  ) )" "\\n(defn get-player-hand []\\r\\n  (\:player-hand (session/get \:game-state)))" "(defproject blackjack \\"0.1.0-SNAPSHOT\\"\\n  \:description \\"FIXME\: write description\\"\\n  \:url \\"http\://example.com/FIXME\\"\\n  \:license {\:name \\"Eclipse Public License\\"\\n            \:url \\"http\://www.eclipse.org/legal/epl-v10.html\\"}\\n  \:dependencies [[org.clojure/clojure \\"1.5.1\\"]  [lib-noir \\"0.4.9\\"]\\r\\n                 [compojure \\"1.1.5\\"]\\r\\n                 [ring-server \\"0.2.7\\"]\\r\\n                 [hiccup \\"1.0.2\\"]]\\r\\n  \:ring {\:handler blackjack.handler/war-handler}\\r\\n  \:profiles {\:production\\r\\n             {\:ring\\r\\n              {\:open-browser? false, \:stacktraces? false, \:auto-reload? false}}}\\r\\n  \:plugins [[lein-ring \\"0.8.3\\"]]\\r\\n  \:min-lein-version \\"2.0.0\\")\\r\\n" "(clojure.core/ns blackjack.controller)\\n(ns blackjack.controller\\r\\n  (\:use compojure.core)\\r\\n  (\:require [compojure.core \:as compojure]\\r\\n            [tictactoe.view \:as view]\\r\\n            [tictactoe.model \:as model]))\\r\\n\\r\\n(defn start-page []\\r\\n  (model/reset-game\!)\\r\\n  (view/play-screen))\\r\\n\\r\\n(defn turn-page [button-pressed]\\r\\n  (let [button-id (name (first (keys button-pressed)))\\r\\n        rownr (Integer/parseInt (str (second button-id)))\\r\\n        colnr (Integer/parseInt (str (nth button-id 2)))]\\r\\n    (model/play\! rownr colnr)\\r\\n    (if-let [winner (model/winner?)]\\r\\n      (view/winner-screen winner)\\r\\n      (if (model/full-board?)\\r\\n        (view/draw-screen)\\r\\n        (view/play-screen)))))\\r\\n\\r\\n(defroutes tictactoe-routes\\r\\n  (GET \\"/\\" [] (start-page))\\r\\n  (POST \\"/\\" {button-pressed \:params} (turn-page button-pressed)))\\n(clojure.core/ns blackjack.model)" "(list 1 2 3)" "let" "(list 1 2 3)" "get-dealer-hand" "(get-dealer-hand)" "\\r\\n(defn callculate-hand [crd]\\r\\n  (let [ace (sort( for[y crd] (y 1)))]  \\r\\n    (let[ totalace (filter \#(\= 1 %)ace) rt (filter \#(< 1 %)ace) ] \\r\\n      (let  [countoface (count totalace) sumofKQJ (* 10(count(filter \#(< 10 %) rt))) sumOfNormalCards  (apply +(filter \#(> 11 %) rt)) ] \\r\\n         (+ sumOfNormalCards sumofKQJ \\r\\n            (if(zero? countoface )0 \\r\\n              (+ (if(\= 1 countoface) (if(> (+ sumofKQJ sumOfNormalCards 10) 21 ) 1 10) \\r\\n                    (if(\= 2 countoface) (if(< (+ sumofKQJ sumOfNormalCards 11) 21) (if(\= (+ sumofKQJ sumOfNormalCards) 0)20 2) 11) \\r\\n                      (if(\= 3 countoface)(if(\= (+ sumofKQJ sumOfNormalCards) 0)21 3) \\r\\n                        (if(\= 4 countoface) 4)))))))))))" " (callculate-hand [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1]])" " (callculate-hand [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 10]])" " (callculate-hand [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1]])" "(clojure.core/ns blackjack.core-test)\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 0 1))))\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(ns blackjack.test.model\\n  (\:use blackjack.model)\\r\\n  (\:use clojure.test))\\n\\n\\n\\n\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-player-hand []) [])\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-player-hand ) [])\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-player-hand ) [])\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-counter) 0)\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is 0 0)\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-player-hand ) [[\\"a\\" 1]])\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(get-player-hand)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(get-dealer-hand) \\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-dealer-hand) [[\\"h\\" 9]])\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(get-counter)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n (is (get-counter) [[\\"h\\" 9]])\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (get-counter) 3)\\n  \\n  \\n  )\\r\\n  \\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest had-defualt-values []\\n  (reset-game)\\n  \\n  (is (\=(get-counter) 3))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n\\n(had-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(get-counter)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n\\n(deftest has-defualt-values []\\n  (reset-game)\\n  \\n  (is (\=(get-counter) 3))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(hads-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(has-defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\nhas-defualt-values\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(is (\= 5 (+ 2 2)))\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(is (\= 5 (+ (get-counter) 2)))\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 3 (+ (get-counter) 2)))\\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 3  (get-counte)))\\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 3 (get-counter)))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 4 (get-counter)))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 3 (get-counter)))\\n  (is (\= [] (get-dealer-hand)))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest defualt-values \\n  \\n  (is (\= 3 (get-counter)))\\n  (is (\= 2 (count(get-dealer-hand))))\\n  \\n  \\n  )\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(defualt-values)\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n (count(get-cards))\\n(clojure.core/ns blackjack.model)" "(clojure.core/ns blackjack.test.model)\\n(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN))\\n    \\n    \\n    \\n    ))\\n(clojure.core/ns blackjack.model)" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))))" "(counting-cards)" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 14 (callculate-hand KN)))))" "(counting-cards)" "(into [[\\"a\\" 1] [\\"a\\"4]])" "  (into [] [[\\"a\\" 1] [\\"a\\"4]])" "(callculate-hand (into [] KN AAA))" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into [] KN AAA)))\\n             (is (\= 24 (callculate-hand (into [] KN AA))) ))))" "(counting-cards)" "  (into [] [[\\"a\\" 1]] [[\\"a\\"4]])" "  (into  [[\\"a\\" 13] [\\"a\\" 3]] [[\\"a\\" 13] [\\"a\\" 12]])" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) ))))" "(counting-cards)" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) ))))" "(counting-cards)" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) )\\n             (is (\= 4 (callculate-hand (into  A AA))) )\\n             \\n             \\n             )))" "\\n(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) )\\n             (is (\= 4 (callculate-hand (into  A AA))) )\\n             \\n             \\n             )))" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) )\\n             \\n             \\n             )))" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA)))\\n             (is (\= 24 (callculate-hand (into  KN AA))) )\\n             (is (\= 4 (callculate-hand (into  A AA))) )\\n             \\n             \\n             )))" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA))))\\n             (is (\= 24 (callculate-hand (into  KN AA))))\\n           ))" "(counting-cards)" "\\n(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA))))\\n             (is (\= 24 (callculate-hand (into  KN AA))))\\n             (is (\= 4 (callculate-hand (into  KN AA))))\\n           ))" "(deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\n    (is (\= 13 (callculate-hand KN)))\\n    (is (\= 20 (callculate-hand KQ)))\\n     (is (\= 10 (callculate-hand A)))\\n      (is (\= 20 (callculate-hand AA)))\\n       (is (\= 21 (callculate-hand AAA)))\\n         (is (\= 16 (callculate-hand (into  KN AAA))))\\n             (is (\= 24 (callculate-hand (into  KN AA))))\\n             (is (\= 4 (callculate-hand (into  A AA))))\\n           ))" "(counting-cards)" "  (deftest counting-cards\\r\\n  (let [KN [[\\"a\\" 13] [\\"a\\" 3]] KQ [[\\"a\\" 13] [\\"a\\" 12]] A [[\\"a\\" 1]] AA [[\\"a\\" 1] [\\"a\\" 1]  ] AAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ] AAAA [[\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] [\\"a\\" 1] ]   ]\\r\\n    (is (\= 13 (callculate-hand KN)))\\r\\n    (is (\= 20 (callculate-hand KQ)))\\r\\n     (is (\= 10 (callculate-hand A)))\\r\\n      (is (\= 20 (callculate-hand AA)))\\r\\n       (is (\= 21 (callculate-hand AAA)))\\r\\n         (is (\= 16 (callculate-hand (into  KN AAA))))\\r\\n             (is (\= 24 (callculate-hand (into  KN AA))))\\r\\n             (is (\= 4 (callculate-hand (into  A AAA))))\\r\\n           ))" "(counting-cards)"]
eclipse.preferences.version=1
